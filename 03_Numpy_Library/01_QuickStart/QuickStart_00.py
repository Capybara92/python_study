'''
「학습자 프로필」
   - NumPy의 대수와 배열에 대한 간략한 개요입니다. 
   - n차원 (n >= 2) 배열이 어떻게 표현되고 조작 될 수 있는지 보여줍니다. 
   - 특히 for 루프를 사용하지 않고 n 차원 배열에 공통 함수를 적용하는 방법을 모르거나 n 차원 배열의 축 및 모양 속성을 이해하려는 경우이 문서가 도움이 될 수 있습니다.
   - NumPy 라이브러리에는 다차원 배열 및 행렬 데이터 구조가 포함되어 있습니다.
   - ndarray 그것을 효율적으로 작동하는 방법과, 균일 한 N 차원 배열 개체. NumPy는 배열에서 다양한 수학 연산을 수행하는 데 사용할 수 있습니다.

「학습목표」
   - NumPy에서 1 차원, 2 차원 및 n 차원 배열의 차이점을 이해합니다.
   - for 루프를 사용하지 않고 몇 가지 선형 대수 연산을 n 차원 배열에 적용하는 방법을 이해합니다.
   - n차원 배열의 축 및 모양 속성을 이해합니다.
'''

#NumPy의 주요 객체는 동종 다차원 배열입니다.
#음수가 아닌 정수의 튜플에 의해 인덱싱 된 동일한 유형의 요소(일반적으로 숫자) 테이블입니다.
#NumPy에서 차원은 "축" 이라고 합니다.
#예를 들어, 3D 공간의 한 점 좌표 [1, 2, 1]에는 하나의 축이 있습니다. 이 축에는 3 개의 요소가 있으므로 길이가 3이라고합니다.

#NumPy의 배열 클래스는 ndarray. 별칭으로도 알려져 있습니다. 
#참고로 numpy.array표준 파이썬 라이브러리 클래스와 동일하지 않습니다.
#ndarray객체 의 더 중요한 속성 은 다음과 같습니다.

#ndarray.array()
#배열만듬

#ndarray.zeros()
#0으로 채워진 배열

#ndarray.ones()
#1로 채워진 배열

#ndarray.empty()
#초기 내용이 무작위이고 메모리 상태에 따라 달라지는 배열을 만듭니다.
#emptyover zeros(또는 비슷한 것) 를 사용하는 이유 는 속도 때문입니다. 나중에 모든 요소를 ​​채워야합니다!

#ndarray.arange()
#일정한 간격의 간격을 포함하는 배열. 이렇게하려면 첫 번째 숫자 , 마지막 숫자, 단계 크기를 지정 합니다.

#ndarray.linspace()
#지정된 간격으로 선형 간격을 갖는 값으로 배열을 만들 수도 있습니다.
#ex) np.linspace(0, 10, num=5)

#dtype
#원하는 데이터 유형을 명시 적으로 지정할 수 있습니다.
#ex) x = np.ones(2, dtype=np.int64)

#ndarray.ndim
#배열의 축(차원) 수.

#ndarray.shape
#배열의 차원. 이것은 각 차원에서 배열의 크기를 나타내는 정수의 튜플입니다.
#매트릭스와 n개의 행과 m개의 열이다.
#따라서 튜플 의 길이는 축의 수입니다.

#ndarray.size
#배열의 총 요소 수입니다.
#이것은의 요소의 곱과 같습니다.

#ndarray.dtype
#배열의 요소 유형을 설명하는 개체입니다.
#표준 Python 유형을 사용하여 dtype을 만들거나 지정할 수 있습니다.
#또한 NumPy는 자체 유형을 제공합니다.
#numpy.int32, numpy.int16 및 numpy.float64가 몇 가지 예입니다.

#ndarray.itemsize
#배열의 각 요소 크기 (바이트).
# 예를 들어, 유형의 요소 배열 float64은 itemsize8 (= 64 / 8)이고 유형 중 하나 complex32는 itemsize4 (= 32 / 8)입니다.

#ndarray.data
#배열의 실제 요소를 포함하는 버퍼.
#일반적으로 인덱싱 기능을 사용하여 배열의 요소에 액세스하므로이 속성을 사용할 필요가 없습니다.

#ndarray.sort(). 
#요소를 정렬
#함수를 호출 할 때 축, 종류 및 순서를 지정할 수 있습니다.
#  argsort, 지정된 축을 따른 간접 정렬
#  lexsort, 여러 키에 대한 간접적 인 안정적인 정렬입니다.
#  searchsorted, 정렬 된 배열에서 요소를 찾습니다.
#  partition, 부분 정렬입니다.

#ndarray.concatenate().
#요소를 연결

#ndarray.reshape()
#데이터를 변경하지 않고 배열에 새로운 모양을 제공한다.
#생성하려는 배열에는 원래 배열과 동일한 수의 요소가 있어야합니다.
#ex) numpy.reshape(a, newshape=(1, 6), order='C')
#newshape원하는 새 모양입니다. 정수 또는 정수 튜플을 지정할 수 있습니다. 정수를 지정하면 결과는 해당 길이의 배열이됩니다. 모양은 원래 모양과 호환되어야합니다.
#order: CC와 같은 인덱스 순서를 사용하여 요소 F를 읽고 쓰는 것을 의미하고 , 포트란과 같은 인덱스 순서를 사용하여 요소 A 를 읽고 / 쓰기하는 것을 의미하고, 
# a가 메모리에서 포트란이 연속적이면 포트란과 같은 인덱스 순서로 요소를 읽거나 쓰는 것을 의미합니다.

#1D 배열을 2D 배열로 변환하는 방법 (배열에 새 축을 추가하는 방법)
#ndarray.newaxis
#한 번 사용할 때 배열의 차원이 1 차원 증가
#ex) a2 = a[np.newaxis, :]

#ndarray.expand_dims.
#지정된 위치에 새 축을 삽입하여 배열을 확장 할 수도 있습니다.
#ex) b = np.expand_dims(a, axis=1) -> 인덱스 위치 1에 축을 추가하는 데 사용.

#ndarray.nonzero
#배열에서 요소 나 인덱스를 선택할 수도 있습니다.
#첫 번째 배열은 이러한 값이있는 행 인덱스를 나타내고 두 번째 배열은 값이있는 열 인덱스를 나타냅니다.

#기존 데이터에서 배열을 만드는 방법
#ndarray.vstack
#세로로 쌓는다.

#ndarray.hstack
#가로로 쌓는다.

#ndarray.hsplit
#배열을 여러 개의 작은 배열로 분할 할 수 있습니다.
#ndarray.hsplit(x, 3) -> 동일한 모양의 3 개 배열로 분할.
