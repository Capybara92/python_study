#구조화 된 배열(Structured arrays)
#구조화 된 배열은 데이터유형이 명명된 필드의 시퀀스로 구성된 더 간단한 데이터 유형의 구성 인ndarray이다.
#예를 들면
import numpy as np

x = np.array([('Rex', 9, 81.0), ('Fido', 3, 27.0)],
                  dtype=[('name', 'U10'), ('age', 'i4'), ('weight', 'f4')])
print(x)
#다음 x는 데이터유형이 3개의 필드가 있는 구조인 길이 2의 1차원 배열이다. 
# - 1. 'name'이라는 이름의 길이가 10이하인 string
# - 2. 'age'라는 이름의 32-bit integer
# - 3. 'weight'라는 이름의 32-bit float.

#x에서 인덱스를 1로하면 구조를 얻는다.
print(x[1])

#필드 름으로 인덱싱하여 구조화 된 배열의 개별필드에 액세스하고 수정할 수 있다.
print(x['age'])
x['age'] = 5
print(x)

#구조화 된 데이터 유형은 C언어의 '구조체'를 모방하고 유사한 메모리 레이아웃을 공유 할 수 있도록 설계되었다.
#C언어 코드와의 인터페이스 및 구조화 된 버퍼의 저수준 조작(예 : 이진 Blob 해석)을 위한 것이다.
#이러한 목적을 위해 하위 배열, 중첩 데이터, 유형, 공용체와 같은 특수기능을 지원하고 구조의 메모리 레이아웃을 제어 할 수 있다.

#csv파일에 저장된 것과 같은 테이블형식 데이터를 조작하려는 사용자는 xarray, pandas, DataArray와 같은 다른 pydata프로젝트가 더 적합한것을 찾을 수 있다.
#이는 표 형식 데이터 분석을위한 고급 인터페이스를 제공하며 해당 용도에 더 잘 최적화된다.
#예를 들어, numpy의 구조화 된 배열의 C구조와 유사한 메모리 레이아웃은 비교에서 캐시동작이 좋지 않을 수 있다.
