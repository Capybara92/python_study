#디스크에서 배열 읽기
#이것은 아마도 대규모 어레이생성의 가장 일반적인 경우 일 것이다.
#물론 세부사항은 디스크의 데이터 형식에 따라 크게 달라지므로 이 섹션에서는 다양한 형식을 처리하는 방법에 대한 일반적인 지침만 제공할 수 있다.

#표준 바이너리 형식(Standard Binary Formats)
#다양한 필드에는 배열 데이터에 대한 표준 형식이 있다.
#다음은 numpy배열을 읽고, numpy배열을 반환하는 알려진 python 라이브러리가있는 목록이다,
    #HDF5: h5py
    #FITS: Astropy
#직접 읽을 수는 없지만 변환하기 어렵지 않은 형식의 예로는,
#PIL과 같은 라이브러리에서 지원하는 형식(jpg, png 등 많은 이미지 형식을 읽고 쓸 수 있음)이 있다.

#일반적인 ASCII 형식(Common ASCII Formats)
#CSV파일이 널리 사용된다.
#Python에서 이러한 파일을 읽는 방법에는 여러 가지가 있다.
#Python에는 CSV함수가 있고 pylab에는 함수가 있다. (matplotlib의 일부)

#커스텀 바이너리 형식(Custom Binary Formats)
#사용할 수있는 다양한 접근 방식이 있다.
#파일의 형식이 비교적 간단한 경우 간단한 I/O 라이브러리를 작성하고 numpy fromfile()함수 및 .tofile ()메서드를 사용하여 numpy배열을 직접 읽고 쓸 수 있다.
#(그래도 바이트 순서에 유의해야한다!)
#또는 데이터를 읽는 C++라이브러리가 존재힌다.
#물론 훨씬 더 많은작업이 필요하고 C 또는 C++와의 인터페이스에 훨씬 더 많은 고급지식이 필요하지만, 다양한 기술로 해당 라이브러리를 래핑할 수 있다.

#특수 라이브러리 사용(Use of Special Libraries)
#특수 목적으로 배열을 생성하는 데 사용할 수있는 라이브러리가 있으며 모두 열거 할 수는 없다.
#가장 일반적인 용도는 무작위 값의 배열을 생성할 수있는 많은 배열 생성함수와 특수행렬(예:대각선)을 생성하는 일부 유틸리티 함수를 사용하는 것이다.
