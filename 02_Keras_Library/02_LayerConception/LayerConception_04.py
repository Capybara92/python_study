#컨볼루션 신경망 레이어 이야기1

#컨볼루션 신경망 모델에서 주로 사용되는 컨볼루션(Convolution) 레이어, 맥스풀링(Max Pooling) 레이어, 플래튼(Flatten) 레이어에 대해서 알아보자.
#각 레이어별로 레이어 구성 및 역할에 대해서 알아보자.

''''''
#필터로 특징을 뽑아주는 컨볼루션(Convolution) 레이어
#케라스에서 제공되는 컨볼루션 레이어 종류에도 여러가지가 있으나 영상 처리에 주로 사용되는 Conv2D 레이어를 살펴보자.
#레이어는 영상인식에 주로 사용되며, 필터가 탑재되어 있다.
#아래는 Conv2D 클래스 사용 예제이다.
Conv2D(32, (5, 5), padding='valid', input_shape=(28, 28, 1), activation='relu')

#주요 인자는 다음과 같다.
#   - 첫번째 인자 : 컨볼루션 필터의 수 이다.
#   - 두번째 인자 : 컨볼루션 커널의 (행, 열) 이다.
#   - padding    : 경계 처리 방법을 정의한다.
#           ‘valid’ : 유효한 영역만 출력이 된다. 따라서 출력 이미지 사이즈는 입력 사이즈보다 작다.
#           ‘same’  : 출력 이미지 사이즈가 입력 이미지 사이즈와 동일하다.
#   - input_shape : 샘플 수를 제외한 입력형태를 정의 한다. 모델에서 첫 레이어일 때만 정의하면 된다.
#                 : (행, 열, 채널 수)로 정의한다. 흑백영상인 경우에는 채널이 1이고, 컬러(RGB)영상인 경우에는 채널을 3으로 설정한다.
#   - activation  : 활성화 함수 설정한다.
#           ‘linear’  : 디폴트 값, 입력뉴런과 가중치로 계산된 결과값이 그대로 출력으로 나온다.
#           ‘relu’    : rectifier 함수, 은익층에 주로 쓰인다.
#           ‘sigmoid’ : 시그모이드 함수, 이진 분류 문제에서 출력층에 주로 쓰인다.
#           ‘softmax’ : 소프트맥스 함수, 다중 클래스 분류 문제에서 출력층에 주로 쓰인다.

#입력 형태는 다음과 같다.
#   - image_data_format이 ‘channels_first’인 경우 (샘플 수, 채널 수, 행, 열)로 이루어진 4D 텐서이다.
#   - image_data_format이 ‘channels_last’인 경우 (샘플 수, 행, 열, 채널 수)로 이루어진 4D 텐서이다.
#   - image_data_format 옵션은 “keras.json” 파일 안에 있는 설정입니다. 콘솔에서 “vi ~/.keras/keras.json”으로 keras.json 파일 내용을 변경할 수 있다.

#출력 형태는 다음과 같다.
#   - image_data_format이 ‘channels_first’인 경우 (샘플 수, 필터 수, 행, 열)로 이루어진 4D 텐서이다.
#   - image_data_format이 ‘channels_last’인 경우 (샘플 수, 행, 열, 필터 수)로 이루어진 4D 텐서이다.
#   - 행과 열의 크기는 padding가 ‘same’인 경우에는 입력 형태의 행과 열의 크기가 동일하다.


#필터는 가중치를 의미한다.
#하나의 필터가 입력 이미지를 순회하면서 적용된 결과값을 모으면 출력 이미지가 생성된다.
#여기에는 두 가지 특성이 있다.
#   - 하나의 필터로 입력 이미지를 순회하기 때문에 순회할 때 적용되는 가중치는 모두 동일하다.
#     이를 파라미터 공유라고 부른다. 이는 학습해야할 가중치 수를 현저하게 줄여준다.
#   - 출력에 영향을 미치는 영역이 지역적으로 제한되어 있다.
#     즉 그림에서 y~0~에 영향을 미치는 입력은 x~0~, x~1~, x~3~, x~4~으로 한정되어 있다.
#     이는 지역적인 특징을 잘 뽑아내게 되어 영상인식에 적합하다.
#     예를 들어 코를 볼 때는 코 주변만 보고, 눈을 볼 때는 눈 주변만 보면서 학습 및 인식하는 것이다.

#가중치의 수
#이를 Dense 레이어와 컨볼루션 레이어와 비교를 해보면서 차이점을 알아보자. 
#영상도 결국에는 픽셀의 집합이므로 입력 뉴런이 9개 (3 x 3)이고, 출력 뉴런이 4개 (2 x 2)인 Dense 레이어로 표현할 수 있다.
Dense(4, input_dim=9))

#컨볼루션 레어어는 필터가 지역적으로만 적용되어 출력 뉴런에 영향을 미치는 입력 뉴런이 제한적이므로 Dense 레이어와 비교했을 때, 가중치가 많이 줄어든 것을 보실 수 있다.
#Dense 레이어에서는 36개의 가중치가 사용되었지만, 컨볼루션 레이어에서는 필터의 크기인 4개의 가중치만을 사용한다.

#경계처리방법
#컨볼루션 레이어 설정 옵션에는 border_mode가 있는데, ‘valid’와 ‘same’으로 설정할 수 있다.
#‘valid’인 경우에는 입력 이미지 영역에 맞게 필터를 적용하기 때문에 출력 이미지 크기가 입력 이미지 크기보다 작아진다.
#반면에 ‘same’은 출력 이미지와 입력 이미지 사이즈가 동일하도록 입력 이미지 경계에 빈 영역을 추가하여 필터를 적용한다.
#‘same’으로 설정 시, 입력 이미지에 경계를 학습시키는 효과가 있다.

#필터 수
#살펴봐야할 것은 필터가 3개라서 출력 이미지도 필터 수에 따라 3개로 늘어났다.
#총 가중치의 수는 3 x 2 x 2으로 12개이다.
#필터마다 고유한 특징을 뽑아 고유한 출력 이미지로 만들기 때문에 필터의 출력값을 더해서 하나의 이미지로 만들거나 그렇게 하지 않는다.
#필터에 대해 생소하신 분은 카메라 필터라고 생각하면 된다.
#스마트폰 카메라로 사진을 찍을 때 필터를 적용해볼 수 있는 데, 적용되는 필터 수에 따라 다른 사진이 나옴을 알 수 있다.
