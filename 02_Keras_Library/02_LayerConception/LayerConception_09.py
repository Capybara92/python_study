#컨볼루션 신경망 모델을 위한 데이터 부풀리기1

#컨볼루션 신경망 모델의 성능을 높이기 위한 방법 중 하나인 데이터 부풀리기에 대해서 알아보겠다.
#훈련셋이 부족하거나 훈련셋이 시험셋의 특성을 충분히 반영하지 못할 때 이 방법을 사용하면 모델의 성능을 크게 향상시킬 수 있다.
#케라스에서는 데이터 부풀리기를 위한 함수를 제공하기 때문에 파라미터 셋팅만으로 간단히 데이터 부풀리기를 할 수 있다.
#   1. 현실적인 문제
#   2. 기존 모델 결과보기
#   3. 데이터 부풀리기
#   4. 개선 모델 결과보기

#현실적인 문제
#내가만든 시험셋과 훈련셋의 정확도는 높다.
#but 타인이 만든 시험셋과 내가만든 훈련셋의 정확도는 현저히 낮다.
'''개발자가 시험셋을 만들면 안된다.'''
#하지만 어떠한 문제에서도 미래에 들어올 데이터에 대해서는 알 수가 없기 때문에, 비슷한 상황일 것 같다.
#먼저 도전 시험셋으로 시험한 결과를 살펴본 뒤, 
#한정적인 훈련셋을 이용하여 최대한 발생할 수 있는 경우을 고려하여 훈련셋을 만드는 방법인 「데이터 부풀리기」에 대해서 알아보겠다.


''''''
#기존 모델 결과보기
#내가 만든 시험셋에서는 결과가 100%나왔는데, 타인의 시험셋으론 어떤 결과가 나오는지 테스트 해보면,
#수행결과는 40%이다.
#세개 중 하나 찍는 문제인데도 불구하고 50%로 못 넘긴다.
#오버피팅이 제대로 된 모델이라고 볼 수 있다.


''''''
#데이터 부풀리기
#케라스에서는 ImageDataGenerator 함수를 통해서 데이터 부풀리기 기능을 제공한다.
#keras.io 페이지를 보면, 아래와 같은 옵션으로 데이터 부풀리기를 할 수 있다.
'''
keras.preprocessing.image.ImageDataGenerator(featurewise_center=False,
                                            samplewise_center=False,
                                            featurewise_std_normalization=False,
                                            samplewise_std_normalization=False,
                                            zca_whitening=False,
                                            rotation_range=0.,                      지정된 각도 범위내에서 임의로 원본이미지를 회전시킨다. 단위는 도이며, 정수형이다.
                                            width_shift_range=0.,                   지정된 수평방향 이동 범위내에서 임의로 원본이미지를 이동시킨다. 수치는 전체넓이의 비율(실수)로 나타낸다.
                                            height_shift_range=0.,                  지정된 수직방향 이동 범위내에서 임의로 원본이미지를 이동시킨다. 수치는 전체높이의 비율(실수)로 나타낸다.
                                            shear_range=0.,                         밀림 강도 범위내에서 임의로 원본이미지를 변형시킨다. 수치는 시계반대방향으로 밀림 강도를 라디안으로 나타낸다.
                                            zoom_range=0.,                          지정된 확대/축소 범위내에서 임의로 원본이미지를 확대/축소한다. “1-수치”부터 “1+수치”사이 범위로 확대/축소를 한다.
                                            channel_shift_range=0.,
                                            fill_mode='nearest',
                                            cval=0.,
                                            horizontal_flip=False,                  수평방향으로 뒤집기를 한다.
                                            vertical_flip=False,                    수직방향으로 뒤집기를 한다.
                                            rescale=None,
                                            preprocessing_function=None,
                                            data_format=K.image_data_format())
'''
#데이터셋 불러오기
#ex)
data_aug_gen = ImageDataGenerator(rescale=1./255, 
                                  rotation_range=15,
                                  width_shift_range=0.1,
                                  height_shift_range=0.1,
                                  shear_range=0.5,
                                  zoom_range=[0.8, 2.0],
                                  horizontal_flip=True,
                                  vertical_flip=True,
                                  fill_mode='nearest')
#ImageDataGenerator함수를 이용하여 지정된 파라미터로 원본이미지에 대해 데이터 부풀리기를 수행한 후 그 결과를 특정 폴더에 저장하는 코드이다.
#여러 파라미터를 사용하였기 때문에 이를 혼합하여 데이터 부풀리기를 수행한다.
#즉 확대/축소도 하고 좌우 이동도 지정하였다면, 축소하면서 좌로 이동된 이미지도 생성된다.

'''
원, 삼각형, 사각형을 분류하는 간단한 문제에서도 개발 모델이 현실에 적용하기 위해서는 어떠한 어려움이 있는 지 알게되었다.
그리고 이를 극복하는 방안으로 데이터 부풀리기 방법에 대해서 알아보고, 각 파라미터 별로 어떻게 데이터를 부풀리는 지 생성된 이미지를 통해 살펴보았다.
훈련셋이 충분하지 않거나 시험셋의 다양한 특성을 반영되어 있지 않다면 데이터 부풀리기 방법은 성능 개선에 큰 도움을 줄 수 있다.
'''
