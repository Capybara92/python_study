#수치입력 다중클래스분류 모델 레시피1

#수치를 입력해서 다중클래스를 분류할 수 있는 모델들에 대해서 알아보자.
#다중클래스 분류를 위한 데이터셋 생성을 해보고, 가장 간단한 퍼셉트론 신경망 모델부터 깊은 다층퍼셉트론 신경망 모델까지 구성 및 학습을 시켜보겠다.

#데이터셋 준비
#훈련에 사용할 임의의 값을 가진 인자 12개로 구성된 입력(x) 1000개와 각 입력에 대해 0에서 9까지 10개의 값 중 임의로 지정된 출력(y)를 가지는 데이터셋을 생성해봤다.
#시험에 사용할 데이터는 100개 준비했다.
import numpy as np

# 데이터셋 생성
x_train = np.random.random((1000, 12))
print(len(x_train))
y_train = np.random.randint(10, size=(1000, 1)) #어떤 범위의 정수 난수를 반환한다. #최소값, 최대 값, 크기 및 형태 인자로 넣는다.
x_test = np.random.random((100, 12))
y_test = np.random.randint(10, size=(100, 1))

#데이터셋의 12개 인자(x) 및 라벨값(y) 모두 무작위 수 이다.
#패턴이 없는 데이터이고, 학습하기에 가장 어려운 케이스라 보실 수 있다.
#물론 패턴이 없기 때문에 이런 데이터로 학습한 모델은 시험셋에서 정확도가 상당히 낮다.
#하지만 이러한 무작위 데이터를 사용하는 이유는 다음과 같다.
#   - 패턴이 없는 데이터에서 각 모델들이 얼마나 빨리 학습되는지 살펴볼 수 있다.
#   - 실제 데이터를 사용하기 전에 데이터셋 형태를 설계하거나 모델 프로토 타입핑 하기에 적절하다.

#12개 입력인자 중 첫번째와 두번째 인자 값만 이용하여 2차원으로 데이터 분포를 살펴보겠다. 
#라벨값에 따라 점의 색상을 다르게 표시했다.
import matplotlib.pyplot as plt

# 데이터셋 확인 (2차원)
plot_x = x_train[:,0]
plot_y = x_train[:,1]
plot_color = y_train.reshape(1000,)

plt.scatter(plot_x, plot_y, c=plot_color)
plt.show()

#실제 데이터에서는 첫번째 인자와 두번째 인자사이의 상관관계가 있다면 그래프에서 패턴을 볼 수 있다.
#우리는 임의의 값으로 데이터셋을 만들었으므로 예상대로 패턴을 찾을 수 없다.
#이번에는 첫번째, 두번째, 세번째의 인자값을 이용하여 3차원으로 그래프를 확인해보겠다.
# 데이터셋 확인 (3차원)
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

plot_x = x_train[:,0]
plot_y = x_train[:,1]
plot_z = x_train[:,2]
plot_color = y_train.reshape(1000,)

ax.scatter(plot_x, plot_y, plot_z, c=plot_color)
plt.show()

#이진분류인 경우, 학습 시에는 0과 1로 값이 지정되며, 예측 시에는 0.0과 1.0 사이의 실수로 확률값이 출력된다. 
#하지만 다중클래스분류인 경우에는 클래스별로 확률값을 지정하기 위해서는 “one-hot 인코딩”을 사용한다.
'''
one-hot 인코딩이란 클래스가 3개일 때, 3개의 값을 가지는 행벡터로 구성하는 것을 말한다. 
삼각형, 사각형, 원을 구분한다고 했을 때, 학습 시에 삼각형 라벨은 [1 0 0], 사각형 라벨은 [0 1 0], 원은 [0 0 1]로 지정한다.
출력 또한 3개의 값을 가지는 행벡터로 나오는데, 만약 [0.2 0.1 0.7] 이렇게 나왔다면, 
삼각형일 확률이 20%, 사각형일 확률이 10%, 원일 확률이 70%임을 뜻하고 이를 모두 더하면 100%가 된다.
'''
#one-hot 인코딩은 아래 코드와 같이 케라스에서 제공하는 “to_categorical()”로 쉽게 처리할 수 있다.
y_train = np.random.randint(10, size=(1000, 1))
y_train = to_categorical(y_train, num_classes=10) # one-hot 인코딩

y_test = np.random.randint(10, size=(100, 1))
y_test = to_categorical(y_test, num_classes=10) # one-hot 인코딩


''''''
#레이어준비
#softmax : 활성화 함수로 입력되는 값을 클래스별로 확률 값이 나오도록 출력시킨다.
#          이 확률값을 모두 더하면 1이 된다. 
#          다중클래스 모델의 출력층에 주로 사용되며, 확률값이 가장 높은 클래스가 모델이 분류한 클래스이다.
